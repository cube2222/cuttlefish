// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package database

import (
	"context"
	"time"
)

const appendMessage = `-- name: AppendMessage :one
UPDATE messages SET content = content || ? WHERE id = ? RETURNING id, conversation_id, content, author
`

type AppendMessageParams struct {
	Content string `json:"content"`
	ID      int    `json:"id"`
}

func (q *Queries) AppendMessage(ctx context.Context, arg AppendMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, appendMessage, arg.Content, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Content,
		&i.Author,
	)
	return i, err
}

const cloneConversationSettings = `-- name: CloneConversationSettings :one
INSERT INTO conversation_settings(system_prompt_template, tools_enabled) SELECT system_prompt_template, tools_enabled FROM conversation_settings WHERE conversation_settings.id = ? RETURNING id, system_prompt_template, tools_enabled
`

func (q *Queries) CloneConversationSettings(ctx context.Context, id int) (ConversationSetting, error) {
	row := q.db.QueryRowContext(ctx, cloneConversationSettings, id)
	var i ConversationSetting
	err := row.Scan(&i.ID, &i.SystemPromptTemplate, &i.ToolsEnabled)
	return i, err
}

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations (conversation_settings_id, title, last_message_time) VALUES (?, ?, ?) RETURNING id, conversation_settings_id, title, last_message_time, generating
`

type CreateConversationParams struct {
	ConversationSettingsID int       `json:"conversationSettingsID"`
	Title                  string    `json:"title"`
	LastMessageTime        time.Time `json:"lastMessageTime"`
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation, arg.ConversationSettingsID, arg.Title, arg.LastMessageTime)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.ConversationSettingsID,
		&i.Title,
		&i.LastMessageTime,
		&i.Generating,
	)
	return i, err
}

const createConversationSettings = `-- name: CreateConversationSettings :one
INSERT INTO conversation_settings (system_prompt_template, tools_enabled) VALUES (?, ?) RETURNING id, system_prompt_template, tools_enabled
`

type CreateConversationSettingsParams struct {
	SystemPromptTemplate string      `json:"systemPromptTemplate"`
	ToolsEnabled         StringArray `json:"toolsEnabled"`
}

func (q *Queries) CreateConversationSettings(ctx context.Context, arg CreateConversationSettingsParams) (ConversationSetting, error) {
	row := q.db.QueryRowContext(ctx, createConversationSettings, arg.SystemPromptTemplate, arg.ToolsEnabled)
	var i ConversationSetting
	err := row.Scan(&i.ID, &i.SystemPromptTemplate, &i.ToolsEnabled)
	return i, err
}

const createConversationTemplate = `-- name: CreateConversationTemplate :one
INSERT INTO conversation_templates(name, conversation_settings_id) VALUES (?, ?) RETURNING id, name, conversation_settings_id
`

type CreateConversationTemplateParams struct {
	Name                   string `json:"name"`
	ConversationSettingsID int    `json:"conversationSettingsID"`
}

func (q *Queries) CreateConversationTemplate(ctx context.Context, arg CreateConversationTemplateParams) (ConversationTemplate, error) {
	row := q.db.QueryRowContext(ctx, createConversationTemplate, arg.Name, arg.ConversationSettingsID)
	var i ConversationTemplate
	err := row.Scan(&i.ID, &i.Name, &i.ConversationSettingsID)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (conversation_id, content, author) VALUES (?, ?, ?) RETURNING id, conversation_id, content, author
`

type CreateMessageParams struct {
	ConversationID int    `json:"conversationID"`
	Content        string `json:"content"`
	Author         string `json:"author"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.ConversationID, arg.Content, arg.Author)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Content,
		&i.Author,
	)
	return i, err
}

const deleteConversation = `-- name: DeleteConversation :exec
DELETE FROM conversations WHERE id = ?
`

func (q *Queries) DeleteConversation(ctx context.Context, id int) error {
	_, err := q.db.ExecContext(ctx, deleteConversation, id)
	return err
}

const getConversation = `-- name: GetConversation :one
SELECT id, conversation_settings_id, title, last_message_time, generating FROM conversations WHERE id = ?
`

func (q *Queries) GetConversation(ctx context.Context, id int) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversation, id)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.ConversationSettingsID,
		&i.Title,
		&i.LastMessageTime,
		&i.Generating,
	)
	return i, err
}

const getConversationSettings = `-- name: GetConversationSettings :one
SELECT id, system_prompt_template, tools_enabled FROM conversation_settings WHERE id = ?
`

func (q *Queries) GetConversationSettings(ctx context.Context, id int) (ConversationSetting, error) {
	row := q.db.QueryRowContext(ctx, getConversationSettings, id)
	var i ConversationSetting
	err := row.Scan(&i.ID, &i.SystemPromptTemplate, &i.ToolsEnabled)
	return i, err
}

const getKeyValue = `-- name: GetKeyValue :one
SELECT "key", value FROM key_values WHERE key = ?
`

func (q *Queries) GetKeyValue(ctx context.Context, key string) (KeyValue, error) {
	row := q.db.QueryRowContext(ctx, getKeyValue, key)
	var i KeyValue
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const getMessage = `-- name: GetMessage :one

SELECT id, conversation_id, content, author FROM messages WHERE id = ?
`

// TODO: Change all wildcards to explicit column lists.
func (q *Queries) GetMessage(ctx context.Context, id int) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Content,
		&i.Author,
	)
	return i, err
}

const listConversations = `-- name: ListConversations :many
SELECT id, conversation_settings_id, title, last_message_time, generating FROM conversations ORDER BY last_message_time DESC
`

func (q *Queries) ListConversations(ctx context.Context) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, listConversations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Conversation{}
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.ConversationSettingsID,
			&i.Title,
			&i.LastMessageTime,
			&i.Generating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMessages = `-- name: ListMessages :many
SELECT id, conversation_id, content, author FROM messages WHERE conversation_id = ? ORDER BY id
`

func (q *Queries) ListMessages(ctx context.Context, conversationID int) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessages, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.Content,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markGenerationDone = `-- name: MarkGenerationDone :exec
UPDATE conversations SET generating = false WHERE id = ?
`

func (q *Queries) MarkGenerationDone(ctx context.Context, id int) error {
	_, err := q.db.ExecContext(ctx, markGenerationDone, id)
	return err
}

const markGenerationStarted = `-- name: MarkGenerationStarted :exec
UPDATE conversations SET generating = true WHERE id = ?
`

func (q *Queries) MarkGenerationStarted(ctx context.Context, id int) error {
	_, err := q.db.ExecContext(ctx, markGenerationStarted, id)
	return err
}

const resetConversationFrom = `-- name: ResetConversationFrom :exec
DELETE FROM messages WHERE conversation_id = ? AND id > ?
`

type ResetConversationFromParams struct {
	ConversationID int `json:"conversationID"`
	ID             int `json:"id"`
}

func (q *Queries) ResetConversationFrom(ctx context.Context, arg ResetConversationFromParams) error {
	_, err := q.db.ExecContext(ctx, resetConversationFrom, arg.ConversationID, arg.ID)
	return err
}

const setKeyValue = `-- name: SetKeyValue :exec
INSERT INTO key_values (key, value) VALUES (@key, @value) ON CONFLICT (key) DO UPDATE SET value = @value
`

type SetKeyValueParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) SetKeyValue(ctx context.Context, arg SetKeyValueParams) error {
	_, err := q.db.ExecContext(ctx, setKeyValue, arg.Key, arg.Value)
	return err
}

const updateConversationSettings = `-- name: UpdateConversationSettings :exec
UPDATE conversation_settings SET system_prompt_template = ?, tools_enabled = ? WHERE id = ?
`

type UpdateConversationSettingsParams struct {
	SystemPromptTemplate string      `json:"systemPromptTemplate"`
	ToolsEnabled         StringArray `json:"toolsEnabled"`
	ID                   int         `json:"id"`
}

func (q *Queries) UpdateConversationSettings(ctx context.Context, arg UpdateConversationSettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateConversationSettings, arg.SystemPromptTemplate, arg.ToolsEnabled, arg.ID)
	return err
}
