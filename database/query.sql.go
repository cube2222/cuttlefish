// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package database

import (
	"context"
	"time"
)

const appendMessage = `-- name: AppendMessage :one
UPDATE messages SET content = content || ? WHERE id = ? RETURNING id, conversation_id, content, author
`

type AppendMessageParams struct {
	Content string `json:"content"`
	ID      int    `json:"id"`
}

func (q *Queries) AppendMessage(ctx context.Context, arg AppendMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, appendMessage, arg.Content, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Content,
		&i.Author,
	)
	return i, err
}

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations (title, last_message_time) VALUES (?, ?) RETURNING id, title, last_message_time, system_prompt
`

type CreateConversationParams struct {
	Title           string    `json:"title"`
	LastMessageTime time.Time `json:"lastMessageTime"`
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation, arg.Title, arg.LastMessageTime)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.LastMessageTime,
		&i.SystemPrompt,
	)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (conversation_id, content, author) VALUES (?, ?, ?) RETURNING id, conversation_id, content, author
`

type CreateMessageParams struct {
	ConversationID int    `json:"conversationID"`
	Content        string `json:"content"`
	Author         string `json:"author"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.ConversationID, arg.Content, arg.Author)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Content,
		&i.Author,
	)
	return i, err
}

const deleteConversation = `-- name: DeleteConversation :exec
DELETE FROM conversations WHERE id = ?
`

func (q *Queries) DeleteConversation(ctx context.Context, id int) error {
	_, err := q.db.ExecContext(ctx, deleteConversation, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, conversation_id, content, author FROM messages WHERE id = ?
`

func (q *Queries) GetMessage(ctx context.Context, id int) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Content,
		&i.Author,
	)
	return i, err
}

const listConversations = `-- name: ListConversations :many
SELECT id, title, last_message_time, system_prompt FROM conversations ORDER BY last_message_time DESC
`

func (q *Queries) ListConversations(ctx context.Context) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, listConversations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Conversation{}
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.LastMessageTime,
			&i.SystemPrompt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMessages = `-- name: ListMessages :many
SELECT id, conversation_id, content, author FROM messages WHERE conversation_id = ? ORDER BY id
`

func (q *Queries) ListMessages(ctx context.Context, conversationID int) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessages, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.Content,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
