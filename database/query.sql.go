// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package database

import (
	"context"
)

const appendMessage = `-- name: AppendMessage :one
UPDATE chat_messages SET content = content || ? WHERE id = ? RETURNING id, content, sent_by_self
`

type AppendMessageParams struct {
	Content string `json:"content"`
	ID      int64  `json:"id"`
}

func (q *Queries) AppendMessage(ctx context.Context, arg AppendMessageParams) (ChatMessage, error) {
	row := q.db.QueryRowContext(ctx, appendMessage, arg.Content, arg.ID)
	var i ChatMessage
	err := row.Scan(&i.ID, &i.Content, &i.SentBySelf)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO chat_messages (content, sent_by_self) VALUES (?, ?) RETURNING id, content, sent_by_self
`

type CreateMessageParams struct {
	Content    string `json:"content"`
	SentBySelf bool   `json:"sentBySelf"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (ChatMessage, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.Content, arg.SentBySelf)
	var i ChatMessage
	err := row.Scan(&i.ID, &i.Content, &i.SentBySelf)
	return i, err
}

const deleteMessages = `-- name: DeleteMessages :exec
DELETE FROM chat_messages
`

func (q *Queries) DeleteMessages(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteMessages)
	return err
}

const listMessages = `-- name: ListMessages :many
SELECT id, content, sent_by_self FROM chat_messages ORDER BY id
`

func (q *Queries) ListMessages(ctx context.Context) ([]ChatMessage, error) {
	rows, err := q.db.QueryContext(ctx, listMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatMessage
	for rows.Next() {
		var i ChatMessage
		if err := rows.Scan(&i.ID, &i.Content, &i.SentBySelf); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
